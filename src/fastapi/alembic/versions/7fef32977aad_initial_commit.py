"""Initial commit

Revision ID: 7fef32977aad
Revises: 
Create Date: 2024-07-24 22:51:09.111243

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7fef32977aad'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blockchain_transaction',
    sa.Column('id', sa.LargeBinary(length=32), nullable=False),
    sa.Column('inamount', sa.Integer(), nullable=False),
    sa.Column('outamount', sa.Integer(), nullable=False),
    sa.Column('incount', sa.Integer(), nullable=False),
    sa.Column('outcount', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('locktime', sa.Integer(), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('vsize', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('is_segwit', sa.Boolean(), nullable=False),
    sa.Column('is_coinbase', sa.Boolean(), nullable=False),
    sa.Column('fee', sa.Integer(), nullable=False),
    sa.Column('blockheight', sa.Integer(), nullable=False),
    sa.Column('serialized', sa.LargeBinary(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=32), nullable=False),
    sa.Column('pwd', sa.String(), nullable=False),
    sa.Column('aeskey_encrypted', sa.LargeBinary(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('blockchain_input',
    sa.Column('txid', sa.LargeBinary(length=32), nullable=False),
    sa.Column('index', sa.Integer(), nullable=False),
    sa.Column('outxid', sa.LargeBinary(length=32), nullable=False),
    sa.Column('outvout', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('is_coinbase', sa.Boolean(), nullable=False),
    sa.Column('script', sa.LargeBinary(), nullable=False),
    sa.Column('witness', sa.LargeBinary(), nullable=False),
    sa.ForeignKeyConstraint(['txid'], ['blockchain_transaction.id'], ),
    sa.PrimaryKeyConstraint('txid', 'index'),
    sa.UniqueConstraint('outxid', 'outvout')
    )
    op.create_table('blockchain_output',
    sa.Column('txid', sa.LargeBinary(length=32), nullable=False),
    sa.Column('vout', sa.Integer(), nullable=False),
    sa.Column('pkscript', sa.LargeBinary(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['txid'], ['blockchain_transaction.id'], ),
    sa.PrimaryKeyConstraint('txid', 'vout')
    )
    op.create_table('user_bitcoin_key',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userid', sa.Integer(), nullable=False),
    sa.Column('encrypted', sa.LargeBinary(), nullable=False),
    sa.Column('dsha256_digest', sa.LargeBinary(length=32), nullable=False),
    sa.Column('pubkey_xb', sa.LargeBinary(length=32), nullable=False),
    sa.Column('pubkey_yb', sa.LargeBinary(length=32), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['userid'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('userid', 'dsha256_digest')
    )
    op.create_table('blockchain_unspent',
    sa.Column('outxid', sa.LargeBinary(), nullable=False),
    sa.Column('outvout', sa.Integer(), nullable=False),
    sa.Column('addresstr', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['outxid', 'outvout'], ['blockchain_output.txid', 'blockchain_output.vout'], ),
    sa.PrimaryKeyConstraint('outxid', 'outvout'),
    sa.UniqueConstraint('addresstr')
    )
    op.create_table('user_bitcoin_address',
    sa.Column('userid', sa.Integer(), nullable=False),
    sa.Column('string', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('P2PKH', 'P2SH_P2WPKH', 'P2WPKH', 'P2WSH', 'P2TR', name='addresstype'), nullable=False),
    sa.Column('network', sa.Enum('mainnet', 'testnet', name='networktype'), nullable=False),
    sa.Column('is_pubkey_compressed', sa.Boolean(), nullable=False),
    sa.Column('keyid', sa.Integer(), nullable=False),
    sa.Column('shortname', sa.String(length=64), nullable=False),
    sa.Column('emojid', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['keyid'], ['user_bitcoin_key.id'], ),
    sa.ForeignKeyConstraint(['userid'], ['user.id'], ),
    sa.PrimaryKeyConstraint('userid', 'string')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_bitcoin_address')
    op.drop_table('blockchain_unspent')
    op.drop_table('user_bitcoin_key')
    op.drop_table('blockchain_output')
    op.drop_table('blockchain_input')
    op.drop_table('user')
    op.drop_table('blockchain_transaction')
    # ### end Alembic commands ###
